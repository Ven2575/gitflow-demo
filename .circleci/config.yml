version: 2.1
#commands: # a reusable command with parameters
#  jobstatus:
parameters:
  output:
    default: false
    type: boolean
#    steps:
#      - run: echo "it is << parameters.output >>"
        
jobs:
  my-job:
    machine:
       image: ubuntu-2004:202101-01
    steps:
      - run:
          name: API call to deploy job
          command: |
              curl --request GET \
               --url https://circleci.com/api/v2/project/github/Ven2575/gitflow-demo/job/$CIRCLE_BUILD_NUM \
               --header 'authorization: Basic REPLACE_BASIC_AUTH' | grep "running"  
              # OUTPUT="$(curl --request GET \
              #  --url https://circleci.com/api/v2/project/github/Ven2575/gitflow-demo/job/$CIRCLE_BUILD_NUM \
              #  --header 'authorization: Basic REPLACE_BASIC_AUTH' | grep "running")"
                
               #if [ -n "${OUTPUT}" ]; then status: true && echo $status; else status: false && echo $status; fi 
 #     - jobstatus: 
 #         output: true
      
      - run:
           name: Defining parameter value
           command: |
              echo ${CIRCLECI_TOKEN}
              curl -u ${CIRCLECI_TOKEN}: -X POST --header "Content-Type: application/json" -d '{
                  "parameters": {
                  "output": true
                  }
              }' https://circleci.com/api/v2/project/github/Ven2575/gitflow-demo/pipeline
      - run: echo "parameter value is << pipeline.parameters.output >>"
       
       #-u ${CIRCLECI_TOKEN}: -X
  rollback-to-previous:
     description: It'll be enabled only when current deployment fails
     machine: 
        image: ubuntu-2004:202101-01
     steps:
       - when:
          condition: << pipeline.parameters.output >>
          steps:
            - run: echo "deployment successful"
       - unless:
          condition: << pipeline.parameters.output >>
          steps:
            - run: echo "deployment fail"
      # - run:
      #      name: testing parameter variable
      #      command: |
      #          echo "I'm in rollback job"
  #job-status:
  #  machine:
  #     image: ubuntu-2004:202101-01
  #  steps:
  #    - run: 
  #        name: saving build number in variable
  #        command: |
  #           echo 'export job_id=$CIRCLE_PREVIOUS_BUILD_NUM' >> $BASH_ENV
  #           #echo job_id=$CIRCLE_PREVIOUS_BUILD_NUM
  #    - run:
  #        name: API call to deploy job
  #        command: |
  #           curl --request GET \
  #             --url https://circleci.com/api/v2/project/github/Ven2575/gitflow-demo/job/$job_id \
  #             --header 'authorization: Basic REPLACE_BASIC_AUTH' >> apioutput.json
  #    - run:
  #         name: finding job status
  #         command: |
  #            echo '
  #            #!/bin/bash/
  #            OUTPUT=$(grep "success" ~/project/apioutput.json)
  #            
  #            if [ -n "${OUTPUT}" ]; then
  #                   echo "${OUTPUT}"
  #               else
  #                   echo "Job is failed"
  #             fi' >> jobstatus.sh
  #    - run: 
        
   #         name: Finding the job status
   #         command: |
   #            sh ~/project/jobstatus.sh
               
workflows:
  version: 2
  my-workflow:
    jobs:
      - my-job
      - rollback-to-previous:
           requires:
              - my-job
           #status: $OUTPUT
    #  - rollback-to-previous:
    #       when: << pipeline.parameters.status >>
    #       requires:
    #          - my-job
      
     # - job-status:
     #      requires:
     #         - my-job
  #rollback:
  #   when: << pipeline.parameters.output >>
  #   jobs:
  #     - rollback-to-previous #invokes parametrized job
              
